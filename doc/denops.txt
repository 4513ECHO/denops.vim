*denops.txt*		An eco-system to write Vim/Neovim plugins in Deno

Author:  Alisue <lambdalisue@hashnote.net>
License: MIT license

=============================================================================
CONTENTS					*denops-contents*

INTRODUCTION					|denops-introduction|
INTERFACE				|denops-interface|
  VARIABLE				|denops-variable|
  FUNCTION				|denops-function|
  AUTOCMD				|denops-autocmd|


=============================================================================
INTRODUCTION					*denops-introduction*

*denops.vim* (denops) is an eco-system to write plugins for Vim or Neovim in
Deno. 

See denops.vim Wiki for learning how to write denops plugins.

https://github.com/vim-denops/denops.vim/wiki


=============================================================================
INTERFACE						*denops-interface*

-----------------------------------------------------------------------------
VARIABLE						*denops-variable*

*g:denops_disable_version_check*
	Disable version check on startup. Use it to forcibly enable denops on
	non supported versions of Vim/Neovim. Do not report any errors/issues
	occurred on non supported versions.
	Default: 0

*g:denops#deno*
	Executable program of Deno. Use it to specify executable program of
	Deno if 'deno' is not in PATH.
	Default: 'deno'

*g:denops#debug*
	Set 1 to enable debug mode. In debug mode, the following additional
	features become enabled.

	- Additional debug messages of denops itself
	- Type checks of Deno modules become enabled

	Note that the debug mode would affect the performance so disable it
	unless you are debugging denops plugins.

	Default: 0

*g:denops#trace*
	Set 1 to enable trace mode. In trace mode, all raw RPC messages
	between Vim/Neovim and denops are echoed.

	Default: 0

*g:denops#enable_workaround_vim_before_8_2_3081*
	Set 1 to enable workaround implementation for operations in Vim before
	8.2.3081. Without this workaround, any errors occurred in operations
	are ignored thus denops and denops plugins cannot detect errors.
	However, with this workaround, interactive features (such as |input()|)
	would always returns |v:null| so break plugins which relies on it.
	Note that if you are using Vim 8.2.3081 or later, this option does
	nothing.
	https://github.com/vim/vim/pull/8477
	https://github.com/vim-denops/denops.vim/issues/93

	Default: 0

*g:denops#server#deno*
	Executable program of Deno for starting a server.
	Default: |g:denops#deno|

*g:denops#server#deno_args*
	Program arguments of Deno for starting a server.
	Default: ['-q', '--no-check', '--unstable', '-A']

*g:denops#server#channel#deno*
	OBSOLETED: A channel server is removed.

*g:denops#server#channel#deno_args*
	OBSOLETED: A channel server is removed.

*g:denops#server#service#deno*
	DEPRECATED: Use |g:denops#server#deno| instead.

*g:denops#server#service#deno_args*
	DEPRECATED: Use |g:denops#server#deno_args| instead.

-----------------------------------------------------------------------------
FUNCTION						*denops-function*

						*denops#notify()*
denops#notify({plugin}, {method}, {params})
	Call API {method} of {plugin} with {params} and return immediately
	without waiting a result.
	Use |denops#request()| instead if you need a result.

						*denops#request()*
denops#request({plugin}, {method}, {params})
	Call API {method} of {plugin} with {params} and wait a result and
	return it.
	Use |denops#notify()| instead if you don't need a result.
	Use |denops#request_async()| instead if you need a result
	asynchronously.

						*denops#request_async()*
denops#request_async({plugin}, {method}, {params}, {success}, {failure})
	Call API {method} of {plugin} with {params} and return immediately.
	Once the call success, the {success} callback is called with a result.
	Otherwise the {failure} callback is called with an error.
	Use |denops#notify()| instead if you don't need a result.
	Use |denops#request()| instead if you need a result synchronously.

						*denops#server#start()*
denops#server#start()
	Start a denops server.
	It will skip internal process if server is already running.
	It is automatically called 1) on |VimEnter| autocmd when denops is
	in |runtimepath| during Vim startup, 2) immediately when denops is
	added to |runtimepath| after Vim startup.
	It will invoke |User| |DenopsReady| autocmd to discover denops plugins.
	See |denops#plugin#discover()| for detail.

						*denops#server#stop()*
denops#server#stop()
	Stop a denops server immediately.

						*denops#server#restart()*
denops#server#restart()
	Restart a denops server.

						*denops#server#status()*
denops#server#status()
	Return a current server status from one of the followings.

	Status		Description~
	"stopped"	Server is stopped.
	"running"	Server is running.

						*denops#plugin#register()*
denops#plugin#register({name}[, {script}[, {options}]])
	Register denops plugin. Use this function to register denops plugins
	which is not discovered by |denops#plugin#discover()|.
	When a {script} is omitted, a "denops/{name}/main.ts" file is searched
	from |runtimepath| like discover.
	The following attributes are available on {options}.

	"reload"	|v:true| to reload a {name} plugin if it is already
			registered.
			DEPRECATED: Use "duplicated" option instead.

	"mode"		|String| to regulate the behavior of registration when
			a {name} plugin is already registered.

			"reload"	Reload the plugin. (Default)
			"skip"		Skip plugin registration.
			"error"		Throw an error.

	It invokes |User| |DenopsPluginPre|:{name} just before denops execute
	a "main" function of the plugin and |User| |DenopsPluginPost|:{name}
	just after denops execute a "main" function of the plugin.

						*denops#plugin#discover()*
denops#plugin#discover([{options}])
	Discover denops plugins from |runtimepath| and register.
	It gathers "main.ts" under "denops/*" directories under |runtimepath|
	if the middle directory does not starts from "@".
	This is automatically called on |User| |DenopsReady| autocmd invoked by
	|denops#server#start()|.
	It uses same {options} as |denops#plugin#register()| except that the
	default value of "mode" is "skip".

						*denops#callback#add()*
denops#callback#add({callback}[, {options}])
	Add {callback} to internal callback map as an anonymous function and
	return an unique {id} to call the {callback} later.
	The following attributes are available on {options}.

	"once"		|v:true| to add the callback as a one-time anonymous
			function which will be removed when the callback has
			called. It is a default behavior due to backward
			compatibility. Use |v:false| to make the callback
			persistent.
>
	" One-time callback
	let id = denops#call#add({ a, b -> a + b })
	let ret = denops#callback#call(id, 1, 2)

	" Persistent callback
	let id = denops#call#add({ a, b -> a + b }, { 'once': v:false })
	let ret1 = denops#callback#call(id, 1, 2)
	let ret2 = denops#callback#call(id, 2, 3)
<
						*denops#callback#remove()*
denops#callback#remove({id})
	Remove a callback of {id} from internal callback map. It does nothing
	when no {id} callback exists.

						*denops#callback#call()*
denops#callback#call({id}[, {args}...])
	Find a callback of {id} from internal callback map and call it with
	given {args} and return a result. It throw an error when no {id}
	callback exists.
	Note that the callback called is automatically removed from the
	internal callback map if "once" option had specified.

						*denops#callback#clear()*
denops#callback#clear()
	Clear an internal callback map.


-----------------------------------------------------------------------------
AUTOCMD						*denops-autocmd*

DenopsReady						*DenopsReady*
	Invoked when a denops become ready. Note that it is not mean that all
	of denops plugins are ready.

DenopsPluginPre:{name}					*DenopsPluginPre*
	Invoked just before denops call a "main" function of a plugin {name}.

DenopsPluginPost:{name}					*DenopsPluginPost*
	Invoked just after denops called a "main" function of a plugin {name}.

DenopsStarted						*DenopsStarted*
	Invoked when a denops server is started.

DenopsStopped						*DenopsStopped*
	Invoked when a denops server is stopped.

DenopsChannelStarted					*DenopsChannelStarted*
	DEPRECATED: Use |DenopsStarted| instead.

DenopsChannelStopped					*DenopsChannelStopped*
	DEPRECATED: Use |DenopsStopped| instead.

DenopsServiceStarted					*DenopsServiceStarted*
	DEPRECATED: Use |DenopsStarted| instead.

DenopsServiceStopped					*DenopsServiceStopped*
	DEPRECATED: Use |DenopsStopped| instead.

=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
